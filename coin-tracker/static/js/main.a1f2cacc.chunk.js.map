{"version":3,"sources":["services/getUSDMarkets.ts","hooks/useDimensions.tsx","hooks/useMarkets.tsx","helpers/renderCanvas.ts","components/ExpandedCard.tsx","components/Card.tsx","MarketList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getUSDMarkets","numberPerPage","paginator","a","fetch","response","json","console","error","message","useDimensions","useState","window","width","innerWidth","height","innerHeight","getDimensions","useMarkets","requestStatus","setRequestStatus","markets","setMarkets","numberOfInitialItems","Math","floor","useEffect","data","state","concat","getMarkets","renderCanvas","canvas","sparkline","priceChange","length","tooltip","handleMouseMove","e","stopPropagation","preventDefault","currentMouseLocation","clientX","i","points","x","context","clearRect","fillStyle","fillText","price","toFixed","date","addEventListener","slice","reverse","getContext","strokeStyle","lineWidth","beginPath","max","min","current","round","y","lineTo","moveTo","DateTime","local","startOf","minus","hours","toFormat","push","stroke","ExpandedCard","canvasRef","useRef","className","ref","Card","name","sparkline_in_7d","total_volume","current_price","price_change_percentage_24h","image","symbol","expand","setExpand","symbolToUpper","toUpperCase","roundedTotalVolInCrypto","priceClass","ShowExpandedCard","onClick","src","MarketList","setPaginator","prevScrollY","goingUp","setGoingUp","handleScroll","currentScrollY","scrollY","document","documentElement","offsetHeight","passive","removeEventListener","map","market","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1f2cacc.chunk.js","sourcesContent":["import { IMarketList } from '../types';\n\nconst getUSDMarkets = async (numberPerPage: number, paginator: number): Promise<IMarketList> => {\n    try {\n        const response = await fetch(\n            `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=${numberPerPage}&page=${paginator}&sparkline=true`,\n        );\n        return response.json();\n    } catch (e) {\n        console.error(e.message);\n        throw e.message;\n    }\n};\n\nexport default getUSDMarkets;\n","import { useState } from 'react';\nimport { IWindowDimensions } from '../types';\n\nconst useDimensions = (): IWindowDimensions => {\n    const getDimensions = (): IWindowDimensions => {\n        const { innerWidth: width, innerHeight: height } = window;\n        return {\n            width,\n            height,\n        };\n    };\n\n    const [dimensions] = useState<IWindowDimensions>(getDimensions());\n\n    return dimensions;\n};\n\nexport default useDimensions;\n","import { useState, useEffect } from 'react';\nimport { IMarketList, IWindowDimensions } from '../types';\nimport getUSDMarkets from '../services/getUSDMarkets';\nimport useDimensions from './useDimensions';\n\nconst useMarkets = (paginator: number): { markets: IMarketList; requestStatus: string } => {\n    const [requestStatus, setRequestStatus] = useState<string>('idle');\n    const [markets, setMarkets] = useState<IMarketList>([]);\n\n    // Get window dimensions and use height of card + padding to calculate initial items\n    const { height }: IWindowDimensions = useDimensions();\n    const numberOfInitialItems: number = Math.floor(height / 49);\n\n    useEffect(() => {\n        setRequestStatus('fetching');\n        const getMarkets = async (): Promise<void> => {\n            const data: IMarketList = await getUSDMarkets(numberOfInitialItems, paginator);\n            setMarkets((state) => state.concat(...data));\n            setRequestStatus('complete');\n        };\n        getMarkets();\n    }, [paginator]);\n\n    return { markets, requestStatus };\n};\n\nexport default useMarkets;\n","import { DateTime } from 'luxon';\nimport { IRenderCanvasProps } from '../types';\n\nconst renderCanvas = ({ canvas, sparkline, priceChange, length, height, tooltip }: IRenderCanvasProps): void => {\n    const handleMouseMove = (e: MouseEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const currentMouseLocation = e.clientX - 32;\n        for (let i = 0; i < points.length; i++) {\n            if (currentMouseLocation === points[i].x) {\n                if (context) {\n                    context.clearRect(0, 0, 100, 50);\n                    context.fillStyle = 'white';\n                    context.fillText(`$${points[i].price.toFixed(2)}`, 0, 15);\n                    context.fillText(`${points[i].date}`, 0, 25);\n                }\n            }\n        }\n    };\n\n    if (tooltip) {\n        canvas.addEventListener('mousemove', (e: MouseEvent) => handleMouseMove(e));\n    }\n    const price = sparkline.price.slice().reverse();\n    const elem: HTMLCanvasElement = canvas;\n    const context = elem.getContext('2d');\n    const points: { x: number; y: number; price: number; date: string }[] = [];\n\n    canvas.addEventListener('mousemove', (e: MouseEvent) => handleMouseMove(e));\n\n    if (context) {\n        context.clearRect(0, 0, length, height);\n        context.strokeStyle = priceChange >= 0 ? 'rgb(46, 174, 52)' : 'rgb(249, 103, 45)';\n        context.fillStyle = priceChange >= 0 ? 'rgb(46, 174, 52)' : 'rgb(249, 103, 45)';\n        context.lineWidth = 1.5;\n        context.beginPath();\n\n        const max = Math.max(...price);\n        const min = Math.min(...price);\n        for (let i = 0; i < price.length; i++) {\n            const current = price[i];\n            const x = Math.round(length - (length / (price.length - 1)) * i);\n            const y = Math.round(height - ((current - min) / (max - min)) * height);\n            if (i) {\n                context.lineTo(x, y);\n            } else {\n                context.moveTo(x, y);\n            }\n            if (tooltip) {\n                const date = DateTime.local().startOf('hour').minus({ hours: i }).toFormat('MMM dd T');\n                points.push({\n                    x,\n                    y,\n                    price: price[i],\n                    date,\n                });\n            }\n        }\n        context.stroke();\n    }\n};\n\nexport default renderCanvas;\n","import React, { ReactElement, useEffect, useRef } from 'react';\nimport renderCanvas from '../helpers/renderCanvas';\nimport { ISparkline } from '../types';\nimport './styles/ExpandedCard.css';\n\nconst ExpandedCard = ({ sparkline, priceChange }: { sparkline: ISparkline; priceChange: number }): ReactElement => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const length = 30 * 16;\n    const height = 135;\n    useEffect(() => {\n        if (canvasRef.current) {\n            renderCanvas({\n                canvas: canvasRef.current,\n                sparkline,\n                priceChange,\n                length,\n                height,\n                tooltip: true,\n            });\n        }\n    }, [sparkline]);\n    return (\n        <div className=\"expanded-card\">\n            <canvas ref={canvasRef} width={`${length}px`} height={`${height}px`} />\n        </div>\n    );\n};\n\nexport default ExpandedCard;\n","import React, { ReactElement, useEffect, useRef, useState, Fragment } from 'react';\nimport { CardItem } from '../types';\nimport renderCanvas from '../helpers/renderCanvas';\nimport './styles/Card.css';\nimport ExpandedCard from './ExpandedCard';\n\nconst Card = ({\n    name,\n    sparkline_in_7d,\n    total_volume,\n    current_price,\n    price_change_percentage_24h,\n    image,\n    symbol,\n}: CardItem): ReactElement => {\n    const [expand, setExpand] = useState(false);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    useEffect(() => {\n        if (canvasRef.current) {\n            renderCanvas({\n                canvas: canvasRef.current,\n                sparkline: sparkline_in_7d,\n                priceChange: price_change_percentage_24h,\n                length: 150,\n                height: 20,\n                tooltip: false,\n            });\n        }\n    }, [sparkline_in_7d]);\n    const symbolToUpper = symbol.toUpperCase();\n    const roundedTotalVolInCrypto = Math.round(total_volume / current_price);\n    const priceClass = price_change_percentage_24h >= 0 ? 'price-pos' : 'price-neg';\n    const ShowExpandedCard = expand ? (\n        <ExpandedCard sparkline={sparkline_in_7d} priceChange={price_change_percentage_24h} />\n    ) : null;\n    return (\n        <Fragment>\n            <button onClick={() => setExpand(!expand)} className=\"card-item\">\n                <div className=\"information\">\n                    <img className=\"currency-image\" src={image} />\n                    <div className=\"stacked\">\n                        <span className=\"symbol\">{symbolToUpper}-USD</span>\n                        <span>{name}</span>\n                    </div>\n                </div>\n                <div className=\"sparkline\">\n                    <canvas ref={canvasRef} width=\"150px\" height=\"20px\" />\n                </div>\n                <div className=\"volume-stacked\">\n                    <span>\n                        {roundedTotalVolInCrypto} {symbolToUpper}\n                    </span>\n                    <span>24h volume</span>\n                </div>\n                <div className=\"price-stacked\">\n                    <span>${current_price}</span>\n                    <span className={priceClass}>\n                        {price_change_percentage_24h ? price_change_percentage_24h.toFixed(2) : 0}\n                    </span>\n                </div>\n            </button>\n            {ShowExpandedCard}\n        </Fragment>\n    );\n};\n\nexport default Card;\n","import React, { Dispatch, ReactElement, SetStateAction, useEffect, useRef, useState } from 'react';\nimport useMarkets from './hooks/useMarkets';\nimport { IMarket } from './types';\nimport Card from './components/Card';\nimport './styles/MarketList.css';\n\nconst MarketList = ({\n    paginator,\n    setPaginator,\n}: {\n    paginator: number;\n    setPaginator: Dispatch<SetStateAction<number>>;\n}): ReactElement => {\n    const { markets } = useMarkets(paginator);\n    const prevScrollY = useRef(0);\n\n    const [goingUp, setGoingUp] = useState(false);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const currentScrollY = window.scrollY;\n            if (prevScrollY.current < currentScrollY && goingUp) {\n                setGoingUp(false);\n            }\n            if (prevScrollY.current > currentScrollY && !goingUp) {\n                setGoingUp(true);\n            }\n\n            prevScrollY.current = currentScrollY;\n            if (window.innerHeight + currentScrollY === document.documentElement.offsetHeight) {\n                const newPaginator = paginator + 1;\n                setPaginator(newPaginator);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll, { passive: true });\n\n        return () => window.removeEventListener('scroll', handleScroll);\n    }, [goingUp, paginator]);\n\n    return (\n        <ul className=\"expandable-list\">\n            {markets.map((market: IMarket) => {\n                const {\n                    id,\n                    name,\n                    sparkline_in_7d,\n                    total_volume,\n                    current_price,\n                    price_change_percentage_24h,\n                    image,\n                    symbol,\n                } = market;\n                return (\n                    <li key={id}>\n                        <Card\n                            symbol={symbol}\n                            name={name}\n                            image={image}\n                            current_price={current_price}\n                            total_volume={total_volume}\n                            price_change_percentage_24h={price_change_percentage_24h}\n                            sparkline_in_7d={sparkline_in_7d}\n                        />\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default MarketList;\n","import React, { ReactElement, useState } from 'react';\nimport './App.css';\nimport MarketList from './MarketList';\n\nconst App = (): ReactElement => {\n    const [paginator, setPaginator] = useState(1);\n    return (\n        <div className=\"App\">\n            <MarketList paginator={paginator} setPaginator={setPaginator} />\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}